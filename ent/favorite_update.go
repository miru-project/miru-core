// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/favorite"
	"github.com/miru-project/miru-core/ent/favoritegroup"
	"github.com/miru-project/miru-core/ent/predicate"
)

// FavoriteUpdate is the builder for updating Favorite entities.
type FavoriteUpdate struct {
	config
	hooks    []Hook
	mutation *FavoriteMutation
}

// Where appends a list predicates to the FavoriteUpdate builder.
func (fu *FavoriteUpdate) Where(ps ...predicate.Favorite) *FavoriteUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetPackage sets the "package" field.
func (fu *FavoriteUpdate) SetPackage(s string) *FavoriteUpdate {
	fu.mutation.SetPackage(s)
	return fu
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillablePackage(s *string) *FavoriteUpdate {
	if s != nil {
		fu.SetPackage(*s)
	}
	return fu
}

// SetURL sets the "url" field.
func (fu *FavoriteUpdate) SetURL(s string) *FavoriteUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillableURL(s *string) *FavoriteUpdate {
	if s != nil {
		fu.SetURL(*s)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FavoriteUpdate) SetType(s string) *FavoriteUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillableType(s *string) *FavoriteUpdate {
	if s != nil {
		fu.SetType(*s)
	}
	return fu
}

// SetTitle sets the "title" field.
func (fu *FavoriteUpdate) SetTitle(s string) *FavoriteUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillableTitle(s *string) *FavoriteUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// SetCover sets the "cover" field.
func (fu *FavoriteUpdate) SetCover(s string) *FavoriteUpdate {
	fu.mutation.SetCover(s)
	return fu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillableCover(s *string) *FavoriteUpdate {
	if s != nil {
		fu.SetCover(*s)
	}
	return fu
}

// ClearCover clears the value of the "cover" field.
func (fu *FavoriteUpdate) ClearCover() *FavoriteUpdate {
	fu.mutation.ClearCover()
	return fu
}

// SetDate sets the "date" field.
func (fu *FavoriteUpdate) SetDate(t time.Time) *FavoriteUpdate {
	fu.mutation.SetDate(t)
	return fu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fu *FavoriteUpdate) SetNillableDate(t *time.Time) *FavoriteUpdate {
	if t != nil {
		fu.SetDate(*t)
	}
	return fu
}

// AddGroupIDs adds the "group" edge to the FavoriteGroup entity by IDs.
func (fu *FavoriteUpdate) AddGroupIDs(ids ...int) *FavoriteUpdate {
	fu.mutation.AddGroupIDs(ids...)
	return fu
}

// AddGroup adds the "group" edges to the FavoriteGroup entity.
func (fu *FavoriteUpdate) AddGroup(f ...*FavoriteGroup) *FavoriteUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddGroupIDs(ids...)
}

// Mutation returns the FavoriteMutation object of the builder.
func (fu *FavoriteUpdate) Mutation() *FavoriteMutation {
	return fu.mutation
}

// ClearGroup clears all "group" edges to the FavoriteGroup entity.
func (fu *FavoriteUpdate) ClearGroup() *FavoriteUpdate {
	fu.mutation.ClearGroup()
	return fu
}

// RemoveGroupIDs removes the "group" edge to FavoriteGroup entities by IDs.
func (fu *FavoriteUpdate) RemoveGroupIDs(ids ...int) *FavoriteUpdate {
	fu.mutation.RemoveGroupIDs(ids...)
	return fu
}

// RemoveGroup removes "group" edges to FavoriteGroup entities.
func (fu *FavoriteUpdate) RemoveGroup(f ...*FavoriteGroup) *FavoriteUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FavoriteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FavoriteUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FavoriteUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FavoriteUpdate) check() error {
	if v, ok := fu.mutation.Package(); ok {
		if err := favorite.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "Favorite.package": %w`, err)}
		}
	}
	if v, ok := fu.mutation.URL(); ok {
		if err := favorite.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Favorite.url": %w`, err)}
		}
	}
	if v, ok := fu.mutation.GetType(); ok {
		if err := favorite.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Favorite.type": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Title(); ok {
		if err := favorite.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Favorite.title": %w`, err)}
		}
	}
	return nil
}

func (fu *FavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(favorite.Table, favorite.Columns, sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Package(); ok {
		_spec.SetField(favorite.FieldPackage, field.TypeString, value)
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.SetField(favorite.FieldURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(favorite.FieldType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(favorite.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Cover(); ok {
		_spec.SetField(favorite.FieldCover, field.TypeString, value)
	}
	if fu.mutation.CoverCleared() {
		_spec.ClearField(favorite.FieldCover, field.TypeString)
	}
	if value, ok := fu.mutation.Date(); ok {
		_spec.SetField(favorite.FieldDate, field.TypeTime, value)
	}
	if fu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedGroupIDs(); len(nodes) > 0 && !fu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FavoriteUpdateOne is the builder for updating a single Favorite entity.
type FavoriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavoriteMutation
}

// SetPackage sets the "package" field.
func (fuo *FavoriteUpdateOne) SetPackage(s string) *FavoriteUpdateOne {
	fuo.mutation.SetPackage(s)
	return fuo
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillablePackage(s *string) *FavoriteUpdateOne {
	if s != nil {
		fuo.SetPackage(*s)
	}
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FavoriteUpdateOne) SetURL(s string) *FavoriteUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillableURL(s *string) *FavoriteUpdateOne {
	if s != nil {
		fuo.SetURL(*s)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FavoriteUpdateOne) SetType(s string) *FavoriteUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillableType(s *string) *FavoriteUpdateOne {
	if s != nil {
		fuo.SetType(*s)
	}
	return fuo
}

// SetTitle sets the "title" field.
func (fuo *FavoriteUpdateOne) SetTitle(s string) *FavoriteUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillableTitle(s *string) *FavoriteUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// SetCover sets the "cover" field.
func (fuo *FavoriteUpdateOne) SetCover(s string) *FavoriteUpdateOne {
	fuo.mutation.SetCover(s)
	return fuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillableCover(s *string) *FavoriteUpdateOne {
	if s != nil {
		fuo.SetCover(*s)
	}
	return fuo
}

// ClearCover clears the value of the "cover" field.
func (fuo *FavoriteUpdateOne) ClearCover() *FavoriteUpdateOne {
	fuo.mutation.ClearCover()
	return fuo
}

// SetDate sets the "date" field.
func (fuo *FavoriteUpdateOne) SetDate(t time.Time) *FavoriteUpdateOne {
	fuo.mutation.SetDate(t)
	return fuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fuo *FavoriteUpdateOne) SetNillableDate(t *time.Time) *FavoriteUpdateOne {
	if t != nil {
		fuo.SetDate(*t)
	}
	return fuo
}

// AddGroupIDs adds the "group" edge to the FavoriteGroup entity by IDs.
func (fuo *FavoriteUpdateOne) AddGroupIDs(ids ...int) *FavoriteUpdateOne {
	fuo.mutation.AddGroupIDs(ids...)
	return fuo
}

// AddGroup adds the "group" edges to the FavoriteGroup entity.
func (fuo *FavoriteUpdateOne) AddGroup(f ...*FavoriteGroup) *FavoriteUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddGroupIDs(ids...)
}

// Mutation returns the FavoriteMutation object of the builder.
func (fuo *FavoriteUpdateOne) Mutation() *FavoriteMutation {
	return fuo.mutation
}

// ClearGroup clears all "group" edges to the FavoriteGroup entity.
func (fuo *FavoriteUpdateOne) ClearGroup() *FavoriteUpdateOne {
	fuo.mutation.ClearGroup()
	return fuo
}

// RemoveGroupIDs removes the "group" edge to FavoriteGroup entities by IDs.
func (fuo *FavoriteUpdateOne) RemoveGroupIDs(ids ...int) *FavoriteUpdateOne {
	fuo.mutation.RemoveGroupIDs(ids...)
	return fuo
}

// RemoveGroup removes "group" edges to FavoriteGroup entities.
func (fuo *FavoriteUpdateOne) RemoveGroup(f ...*FavoriteGroup) *FavoriteUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the FavoriteUpdate builder.
func (fuo *FavoriteUpdateOne) Where(ps ...predicate.Favorite) *FavoriteUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FavoriteUpdateOne) Select(field string, fields ...string) *FavoriteUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Favorite entity.
func (fuo *FavoriteUpdateOne) Save(ctx context.Context) (*Favorite, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FavoriteUpdateOne) SaveX(ctx context.Context) *Favorite {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FavoriteUpdateOne) check() error {
	if v, ok := fuo.mutation.Package(); ok {
		if err := favorite.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "Favorite.package": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.URL(); ok {
		if err := favorite.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Favorite.url": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.GetType(); ok {
		if err := favorite.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Favorite.type": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Title(); ok {
		if err := favorite.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Favorite.title": %w`, err)}
		}
	}
	return nil
}

func (fuo *FavoriteUpdateOne) sqlSave(ctx context.Context) (_node *Favorite, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(favorite.Table, favorite.Columns, sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Favorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favorite.FieldID)
		for _, f := range fields {
			if !favorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Package(); ok {
		_spec.SetField(favorite.FieldPackage, field.TypeString, value)
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.SetField(favorite.FieldURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(favorite.FieldType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(favorite.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Cover(); ok {
		_spec.SetField(favorite.FieldCover, field.TypeString, value)
	}
	if fuo.mutation.CoverCleared() {
		_spec.ClearField(favorite.FieldCover, field.TypeString)
	}
	if value, ok := fuo.mutation.Date(); ok {
		_spec.SetField(favorite.FieldDate, field.TypeTime, value)
	}
	if fuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedGroupIDs(); len(nodes) > 0 && !fuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Favorite{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
