// Code generated by ent, DO NOT EDIT.

package extensionreposetting

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the extensionreposetting type in the database.
	Label = "extension_repo_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// Table holds the table name of the extensionreposetting in the database.
	Table = "extension_repo_settings"
)

// Columns holds all SQL columns for extensionreposetting fields.
var Columns = []string{
	FieldID,
	FieldLink,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/miru-project/miru-core/ent/runtime"
var (
	Hooks [1]ent.Hook
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the ExtensionRepoSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}
