// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/extensionsetting"
	"github.com/miru-project/miru-core/ent/predicate"
)

// ExtensionSettingUpdate is the builder for updating ExtensionSetting entities.
type ExtensionSettingUpdate struct {
	config
	hooks    []Hook
	mutation *ExtensionSettingMutation
}

// Where appends a list predicates to the ExtensionSettingUpdate builder.
func (_u *ExtensionSettingUpdate) Where(ps ...predicate.ExtensionSetting) *ExtensionSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPackage sets the "package" field.
func (_u *ExtensionSettingUpdate) SetPackage(v string) *ExtensionSettingUpdate {
	_u.mutation.SetPackage(v)
	return _u
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillablePackage(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetPackage(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ExtensionSettingUpdate) SetTitle(v string) *ExtensionSettingUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableTitle(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ExtensionSettingUpdate) SetKey(v string) *ExtensionSettingUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableKey(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ExtensionSettingUpdate) SetValue(v string) *ExtensionSettingUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableValue(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *ExtensionSettingUpdate) ClearValue() *ExtensionSettingUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetDefaultValue sets the "default_value" field.
func (_u *ExtensionSettingUpdate) SetDefaultValue(v string) *ExtensionSettingUpdate {
	_u.mutation.SetDefaultValue(v)
	return _u
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableDefaultValue(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetDefaultValue(*v)
	}
	return _u
}

// SetDbType sets the "db_type" field.
func (_u *ExtensionSettingUpdate) SetDbType(v extensionsetting.DbType) *ExtensionSettingUpdate {
	_u.mutation.SetDbType(v)
	return _u
}

// SetNillableDbType sets the "db_type" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableDbType(v *extensionsetting.DbType) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetDbType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ExtensionSettingUpdate) SetDescription(v string) *ExtensionSettingUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableDescription(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ExtensionSettingUpdate) ClearDescription() *ExtensionSettingUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetOptions sets the "options" field.
func (_u *ExtensionSettingUpdate) SetOptions(v string) *ExtensionSettingUpdate {
	_u.mutation.SetOptions(v)
	return _u
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (_u *ExtensionSettingUpdate) SetNillableOptions(v *string) *ExtensionSettingUpdate {
	if v != nil {
		_u.SetOptions(*v)
	}
	return _u
}

// ClearOptions clears the value of the "options" field.
func (_u *ExtensionSettingUpdate) ClearOptions() *ExtensionSettingUpdate {
	_u.mutation.ClearOptions()
	return _u
}

// Mutation returns the ExtensionSettingMutation object of the builder.
func (_u *ExtensionSettingUpdate) Mutation() *ExtensionSettingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExtensionSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExtensionSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionSettingUpdate) check() error {
	if v, ok := _u.mutation.Package(); ok {
		if err := extensionsetting.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.package": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := extensionsetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Key(); ok {
		if err := extensionsetting.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DefaultValue(); ok {
		if err := extensionsetting.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.default_value": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DbType(); ok {
		if err := extensionsetting.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "db_type", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.db_type": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionsetting.Table, extensionsetting.Columns, sqlgraph.NewFieldSpec(extensionsetting.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Package(); ok {
		_spec.SetField(extensionsetting.FieldPackage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(extensionsetting.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(extensionsetting.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(extensionsetting.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(extensionsetting.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.DefaultValue(); ok {
		_spec.SetField(extensionsetting.FieldDefaultValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.DbType(); ok {
		_spec.SetField(extensionsetting.FieldDbType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(extensionsetting.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(extensionsetting.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(extensionsetting.FieldOptions, field.TypeString, value)
	}
	if _u.mutation.OptionsCleared() {
		_spec.ClearField(extensionsetting.FieldOptions, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExtensionSettingUpdateOne is the builder for updating a single ExtensionSetting entity.
type ExtensionSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtensionSettingMutation
}

// SetPackage sets the "package" field.
func (_u *ExtensionSettingUpdateOne) SetPackage(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetPackage(v)
	return _u
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillablePackage(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetPackage(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *ExtensionSettingUpdateOne) SetTitle(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableTitle(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ExtensionSettingUpdateOne) SetKey(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableKey(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ExtensionSettingUpdateOne) SetValue(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableValue(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *ExtensionSettingUpdateOne) ClearValue() *ExtensionSettingUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetDefaultValue sets the "default_value" field.
func (_u *ExtensionSettingUpdateOne) SetDefaultValue(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetDefaultValue(v)
	return _u
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableDefaultValue(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetDefaultValue(*v)
	}
	return _u
}

// SetDbType sets the "db_type" field.
func (_u *ExtensionSettingUpdateOne) SetDbType(v extensionsetting.DbType) *ExtensionSettingUpdateOne {
	_u.mutation.SetDbType(v)
	return _u
}

// SetNillableDbType sets the "db_type" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableDbType(v *extensionsetting.DbType) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetDbType(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ExtensionSettingUpdateOne) SetDescription(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableDescription(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ExtensionSettingUpdateOne) ClearDescription() *ExtensionSettingUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetOptions sets the "options" field.
func (_u *ExtensionSettingUpdateOne) SetOptions(v string) *ExtensionSettingUpdateOne {
	_u.mutation.SetOptions(v)
	return _u
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (_u *ExtensionSettingUpdateOne) SetNillableOptions(v *string) *ExtensionSettingUpdateOne {
	if v != nil {
		_u.SetOptions(*v)
	}
	return _u
}

// ClearOptions clears the value of the "options" field.
func (_u *ExtensionSettingUpdateOne) ClearOptions() *ExtensionSettingUpdateOne {
	_u.mutation.ClearOptions()
	return _u
}

// Mutation returns the ExtensionSettingMutation object of the builder.
func (_u *ExtensionSettingUpdateOne) Mutation() *ExtensionSettingMutation {
	return _u.mutation
}

// Where appends a list predicates to the ExtensionSettingUpdate builder.
func (_u *ExtensionSettingUpdateOne) Where(ps ...predicate.ExtensionSetting) *ExtensionSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExtensionSettingUpdateOne) Select(field string, fields ...string) *ExtensionSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExtensionSetting entity.
func (_u *ExtensionSettingUpdateOne) Save(ctx context.Context) (*ExtensionSetting, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionSettingUpdateOne) SaveX(ctx context.Context) *ExtensionSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExtensionSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Package(); ok {
		if err := extensionsetting.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.package": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := extensionsetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Key(); ok {
		if err := extensionsetting.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DefaultValue(); ok {
		if err := extensionsetting.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.default_value": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DbType(); ok {
		if err := extensionsetting.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "db_type", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.db_type": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionSettingUpdateOne) sqlSave(ctx context.Context) (_node *ExtensionSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionsetting.Table, extensionsetting.Columns, sqlgraph.NewFieldSpec(extensionsetting.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExtensionSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extensionsetting.FieldID)
		for _, f := range fields {
			if !extensionsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != extensionsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Package(); ok {
		_spec.SetField(extensionsetting.FieldPackage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(extensionsetting.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(extensionsetting.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(extensionsetting.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(extensionsetting.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.DefaultValue(); ok {
		_spec.SetField(extensionsetting.FieldDefaultValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.DbType(); ok {
		_spec.SetField(extensionsetting.FieldDbType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(extensionsetting.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(extensionsetting.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Options(); ok {
		_spec.SetField(extensionsetting.FieldOptions, field.TypeString, value)
	}
	if _u.mutation.OptionsCleared() {
		_spec.ClearField(extensionsetting.FieldOptions, field.TypeString)
	}
	_node = &ExtensionSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
