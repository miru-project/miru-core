// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/miru-project/miru-core/ent/extensionsetting"
)

// ExtensionSetting is the model entity for the ExtensionSetting schema.
type ExtensionSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Package name of the extension
	Package string `json:"package,omitempty"`
	// Title
	Title string `json:"title,omitempty"`
	// Key
	Key string `json:"key,omitempty"`
	// Value
	Value *string `json:"value,omitempty"`
	// Default value
	DefaultValue *string `json:"default_value,omitempty"`
	// Type stored as string: input, radio, toggle
	DbType extensionsetting.DbType `json:"db_type,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Options (JSON or comma-separated)
	Options      *string `json:"options,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExtensionSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case extensionsetting.FieldID:
			values[i] = new(sql.NullInt64)
		case extensionsetting.FieldPackage, extensionsetting.FieldTitle, extensionsetting.FieldKey, extensionsetting.FieldValue, extensionsetting.FieldDefaultValue, extensionsetting.FieldDbType, extensionsetting.FieldDescription, extensionsetting.FieldOptions:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExtensionSetting fields.
func (_m *ExtensionSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case extensionsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case extensionsetting.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				_m.Package = value.String
			}
		case extensionsetting.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case extensionsetting.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				_m.Key = value.String
			}
		case extensionsetting.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = new(string)
				*_m.Value = value.String
			}
		case extensionsetting.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				_m.DefaultValue = new(string)
				*_m.DefaultValue = value.String
			}
		case extensionsetting.FieldDbType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_type", values[i])
			} else if value.Valid {
				_m.DbType = extensionsetting.DbType(value.String)
			}
		case extensionsetting.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case extensionsetting.FieldOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value.Valid {
				_m.Options = new(string)
				*_m.Options = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ExtensionSetting.
// This includes values selected through modifiers, order, etc.
func (_m *ExtensionSetting) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ExtensionSetting.
// Note that you need to call ExtensionSetting.Unwrap() before calling this method if this ExtensionSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ExtensionSetting) Update() *ExtensionSettingUpdateOne {
	return NewExtensionSettingClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ExtensionSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ExtensionSetting) Unwrap() *ExtensionSetting {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExtensionSetting is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ExtensionSetting) String() string {
	var builder strings.Builder
	builder.WriteString("ExtensionSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("package=")
	builder.WriteString(_m.Package)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(_m.Key)
	builder.WriteString(", ")
	if v := _m.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DefaultValue; v != nil {
		builder.WriteString("default_value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("db_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.DbType))
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Options; v != nil {
		builder.WriteString("options=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ExtensionSettings is a parsable slice of ExtensionSetting.
type ExtensionSettings []*ExtensionSetting
