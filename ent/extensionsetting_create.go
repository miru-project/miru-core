// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/extensionsetting"
)

// ExtensionSettingCreate is the builder for creating a ExtensionSetting entity.
type ExtensionSettingCreate struct {
	config
	mutation *ExtensionSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackage sets the "package" field.
func (_c *ExtensionSettingCreate) SetPackage(v string) *ExtensionSettingCreate {
	_c.mutation.SetPackage(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ExtensionSettingCreate) SetTitle(v string) *ExtensionSettingCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetKey sets the "key" field.
func (_c *ExtensionSettingCreate) SetKey(v string) *ExtensionSettingCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *ExtensionSettingCreate) SetValue(v string) *ExtensionSettingCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_c *ExtensionSettingCreate) SetNillableValue(v *string) *ExtensionSettingCreate {
	if v != nil {
		_c.SetValue(*v)
	}
	return _c
}

// SetDefaultValue sets the "default_value" field.
func (_c *ExtensionSettingCreate) SetDefaultValue(v string) *ExtensionSettingCreate {
	_c.mutation.SetDefaultValue(v)
	return _c
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (_c *ExtensionSettingCreate) SetNillableDefaultValue(v *string) *ExtensionSettingCreate {
	if v != nil {
		_c.SetDefaultValue(*v)
	}
	return _c
}

// SetDbType sets the "db_type" field.
func (_c *ExtensionSettingCreate) SetDbType(v extensionsetting.DbType) *ExtensionSettingCreate {
	_c.mutation.SetDbType(v)
	return _c
}

// SetNillableDbType sets the "db_type" field if the given value is not nil.
func (_c *ExtensionSettingCreate) SetNillableDbType(v *extensionsetting.DbType) *ExtensionSettingCreate {
	if v != nil {
		_c.SetDbType(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ExtensionSettingCreate) SetDescription(v string) *ExtensionSettingCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ExtensionSettingCreate) SetNillableDescription(v *string) *ExtensionSettingCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetOptions sets the "options" field.
func (_c *ExtensionSettingCreate) SetOptions(v string) *ExtensionSettingCreate {
	_c.mutation.SetOptions(v)
	return _c
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (_c *ExtensionSettingCreate) SetNillableOptions(v *string) *ExtensionSettingCreate {
	if v != nil {
		_c.SetOptions(*v)
	}
	return _c
}

// Mutation returns the ExtensionSettingMutation object of the builder.
func (_c *ExtensionSettingCreate) Mutation() *ExtensionSettingMutation {
	return _c.mutation
}

// Save creates the ExtensionSetting in the database.
func (_c *ExtensionSettingCreate) Save(ctx context.Context) (*ExtensionSetting, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ExtensionSettingCreate) SaveX(ctx context.Context) *ExtensionSetting {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExtensionSettingCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExtensionSettingCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ExtensionSettingCreate) defaults() error {
	if _, ok := _c.mutation.DefaultValue(); !ok {
		v := extensionsetting.DefaultDefaultValue
		_c.mutation.SetDefaultValue(v)
	}
	if _, ok := _c.mutation.DbType(); !ok {
		v := extensionsetting.DefaultDbType
		_c.mutation.SetDbType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ExtensionSettingCreate) check() error {
	if _, ok := _c.mutation.Package(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required field "ExtensionSetting.package"`)}
	}
	if v, ok := _c.mutation.Package(); ok {
		if err := extensionsetting.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.package": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ExtensionSetting.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := extensionsetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ExtensionSetting.key"`)}
	}
	if v, ok := _c.mutation.Key(); ok {
		if err := extensionsetting.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DefaultValue(); !ok {
		return &ValidationError{Name: "default_value", err: errors.New(`ent: missing required field "ExtensionSetting.default_value"`)}
	}
	if v, ok := _c.mutation.DefaultValue(); ok {
		if err := extensionsetting.DefaultValueValidator(v); err != nil {
			return &ValidationError{Name: "default_value", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.default_value": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DbType(); !ok {
		return &ValidationError{Name: "db_type", err: errors.New(`ent: missing required field "ExtensionSetting.db_type"`)}
	}
	if v, ok := _c.mutation.DbType(); ok {
		if err := extensionsetting.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "db_type", err: fmt.Errorf(`ent: validator failed for field "ExtensionSetting.db_type": %w`, err)}
		}
	}
	return nil
}

func (_c *ExtensionSettingCreate) sqlSave(ctx context.Context) (*ExtensionSetting, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ExtensionSettingCreate) createSpec() (*ExtensionSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ExtensionSetting{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(extensionsetting.Table, sqlgraph.NewFieldSpec(extensionsetting.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Package(); ok {
		_spec.SetField(extensionsetting.FieldPackage, field.TypeString, value)
		_node.Package = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(extensionsetting.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(extensionsetting.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(extensionsetting.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if value, ok := _c.mutation.DefaultValue(); ok {
		_spec.SetField(extensionsetting.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = &value
	}
	if value, ok := _c.mutation.DbType(); ok {
		_spec.SetField(extensionsetting.FieldDbType, field.TypeEnum, value)
		_node.DbType = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(extensionsetting.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Options(); ok {
		_spec.SetField(extensionsetting.FieldOptions, field.TypeString, value)
		_node.Options = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtensionSetting.Create().
//		SetPackage(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtensionSettingUpsert) {
//			SetPackage(v+v).
//		}).
//		Exec(ctx)
func (_c *ExtensionSettingCreate) OnConflict(opts ...sql.ConflictOption) *ExtensionSettingUpsertOne {
	_c.conflict = opts
	return &ExtensionSettingUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ExtensionSettingCreate) OnConflictColumns(columns ...string) *ExtensionSettingUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ExtensionSettingUpsertOne{
		create: _c,
	}
}

type (
	// ExtensionSettingUpsertOne is the builder for "upsert"-ing
	//  one ExtensionSetting node.
	ExtensionSettingUpsertOne struct {
		create *ExtensionSettingCreate
	}

	// ExtensionSettingUpsert is the "OnConflict" setter.
	ExtensionSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackage sets the "package" field.
func (u *ExtensionSettingUpsert) SetPackage(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldPackage, v)
	return u
}

// UpdatePackage sets the "package" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdatePackage() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldPackage)
	return u
}

// SetTitle sets the "title" field.
func (u *ExtensionSettingUpsert) SetTitle(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateTitle() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldTitle)
	return u
}

// SetKey sets the "key" field.
func (u *ExtensionSettingUpsert) SetKey(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateKey() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *ExtensionSettingUpsert) SetValue(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateValue() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *ExtensionSettingUpsert) ClearValue() *ExtensionSettingUpsert {
	u.SetNull(extensionsetting.FieldValue)
	return u
}

// SetDefaultValue sets the "default_value" field.
func (u *ExtensionSettingUpsert) SetDefaultValue(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldDefaultValue, v)
	return u
}

// UpdateDefaultValue sets the "default_value" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateDefaultValue() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldDefaultValue)
	return u
}

// SetDbType sets the "db_type" field.
func (u *ExtensionSettingUpsert) SetDbType(v extensionsetting.DbType) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldDbType, v)
	return u
}

// UpdateDbType sets the "db_type" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateDbType() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldDbType)
	return u
}

// SetDescription sets the "description" field.
func (u *ExtensionSettingUpsert) SetDescription(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateDescription() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ExtensionSettingUpsert) ClearDescription() *ExtensionSettingUpsert {
	u.SetNull(extensionsetting.FieldDescription)
	return u
}

// SetOptions sets the "options" field.
func (u *ExtensionSettingUpsert) SetOptions(v string) *ExtensionSettingUpsert {
	u.Set(extensionsetting.FieldOptions, v)
	return u
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ExtensionSettingUpsert) UpdateOptions() *ExtensionSettingUpsert {
	u.SetExcluded(extensionsetting.FieldOptions)
	return u
}

// ClearOptions clears the value of the "options" field.
func (u *ExtensionSettingUpsert) ClearOptions() *ExtensionSettingUpsert {
	u.SetNull(extensionsetting.FieldOptions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExtensionSettingUpsertOne) UpdateNewValues() *ExtensionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExtensionSettingUpsertOne) Ignore() *ExtensionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtensionSettingUpsertOne) DoNothing() *ExtensionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtensionSettingCreate.OnConflict
// documentation for more info.
func (u *ExtensionSettingUpsertOne) Update(set func(*ExtensionSettingUpsert)) *ExtensionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtensionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackage sets the "package" field.
func (u *ExtensionSettingUpsertOne) SetPackage(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetPackage(v)
	})
}

// UpdatePackage sets the "package" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdatePackage() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdatePackage()
	})
}

// SetTitle sets the "title" field.
func (u *ExtensionSettingUpsertOne) SetTitle(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateTitle() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetKey sets the "key" field.
func (u *ExtensionSettingUpsertOne) SetKey(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateKey() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ExtensionSettingUpsertOne) SetValue(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateValue() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ExtensionSettingUpsertOne) ClearValue() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearValue()
	})
}

// SetDefaultValue sets the "default_value" field.
func (u *ExtensionSettingUpsertOne) SetDefaultValue(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDefaultValue(v)
	})
}

// UpdateDefaultValue sets the "default_value" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateDefaultValue() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDefaultValue()
	})
}

// SetDbType sets the "db_type" field.
func (u *ExtensionSettingUpsertOne) SetDbType(v extensionsetting.DbType) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDbType(v)
	})
}

// UpdateDbType sets the "db_type" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateDbType() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDbType()
	})
}

// SetDescription sets the "description" field.
func (u *ExtensionSettingUpsertOne) SetDescription(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateDescription() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExtensionSettingUpsertOne) ClearDescription() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearDescription()
	})
}

// SetOptions sets the "options" field.
func (u *ExtensionSettingUpsertOne) SetOptions(v string) *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ExtensionSettingUpsertOne) UpdateOptions() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *ExtensionSettingUpsertOne) ClearOptions() *ExtensionSettingUpsertOne {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearOptions()
	})
}

// Exec executes the query.
func (u *ExtensionSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExtensionSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtensionSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExtensionSettingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExtensionSettingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExtensionSettingCreateBulk is the builder for creating many ExtensionSetting entities in bulk.
type ExtensionSettingCreateBulk struct {
	config
	err      error
	builders []*ExtensionSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the ExtensionSetting entities in the database.
func (_c *ExtensionSettingCreateBulk) Save(ctx context.Context) ([]*ExtensionSetting, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ExtensionSetting, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExtensionSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ExtensionSettingCreateBulk) SaveX(ctx context.Context) []*ExtensionSetting {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExtensionSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExtensionSettingCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ExtensionSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExtensionSettingUpsert) {
//			SetPackage(v+v).
//		}).
//		Exec(ctx)
func (_c *ExtensionSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExtensionSettingUpsertBulk {
	_c.conflict = opts
	return &ExtensionSettingUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *ExtensionSettingCreateBulk) OnConflictColumns(columns ...string) *ExtensionSettingUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &ExtensionSettingUpsertBulk{
		create: _c,
	}
}

// ExtensionSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of ExtensionSetting nodes.
type ExtensionSettingUpsertBulk struct {
	create *ExtensionSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExtensionSettingUpsertBulk) UpdateNewValues() *ExtensionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ExtensionSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExtensionSettingUpsertBulk) Ignore() *ExtensionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExtensionSettingUpsertBulk) DoNothing() *ExtensionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExtensionSettingCreateBulk.OnConflict
// documentation for more info.
func (u *ExtensionSettingUpsertBulk) Update(set func(*ExtensionSettingUpsert)) *ExtensionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExtensionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackage sets the "package" field.
func (u *ExtensionSettingUpsertBulk) SetPackage(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetPackage(v)
	})
}

// UpdatePackage sets the "package" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdatePackage() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdatePackage()
	})
}

// SetTitle sets the "title" field.
func (u *ExtensionSettingUpsertBulk) SetTitle(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateTitle() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateTitle()
	})
}

// SetKey sets the "key" field.
func (u *ExtensionSettingUpsertBulk) SetKey(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateKey() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ExtensionSettingUpsertBulk) SetValue(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateValue() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *ExtensionSettingUpsertBulk) ClearValue() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearValue()
	})
}

// SetDefaultValue sets the "default_value" field.
func (u *ExtensionSettingUpsertBulk) SetDefaultValue(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDefaultValue(v)
	})
}

// UpdateDefaultValue sets the "default_value" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateDefaultValue() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDefaultValue()
	})
}

// SetDbType sets the "db_type" field.
func (u *ExtensionSettingUpsertBulk) SetDbType(v extensionsetting.DbType) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDbType(v)
	})
}

// UpdateDbType sets the "db_type" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateDbType() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDbType()
	})
}

// SetDescription sets the "description" field.
func (u *ExtensionSettingUpsertBulk) SetDescription(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateDescription() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExtensionSettingUpsertBulk) ClearDescription() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearDescription()
	})
}

// SetOptions sets the "options" field.
func (u *ExtensionSettingUpsertBulk) SetOptions(v string) *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.SetOptions(v)
	})
}

// UpdateOptions sets the "options" field to the value that was provided on create.
func (u *ExtensionSettingUpsertBulk) UpdateOptions() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.UpdateOptions()
	})
}

// ClearOptions clears the value of the "options" field.
func (u *ExtensionSettingUpsertBulk) ClearOptions() *ExtensionSettingUpsertBulk {
	return u.Update(func(s *ExtensionSettingUpsert) {
		s.ClearOptions()
	})
}

// Exec executes the query.
func (u *ExtensionSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExtensionSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExtensionSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExtensionSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
