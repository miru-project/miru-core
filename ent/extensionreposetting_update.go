// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/extensionreposetting"
	"github.com/miru-project/miru-core/ent/predicate"
)

// ExtensionRepoSettingUpdate is the builder for updating ExtensionRepoSetting entities.
type ExtensionRepoSettingUpdate struct {
	config
	hooks    []Hook
	mutation *ExtensionRepoSettingMutation
}

// Where appends a list predicates to the ExtensionRepoSettingUpdate builder.
func (_u *ExtensionRepoSettingUpdate) Where(ps ...predicate.ExtensionRepoSetting) *ExtensionRepoSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLink sets the "link" field.
func (_u *ExtensionRepoSettingUpdate) SetLink(v string) *ExtensionRepoSettingUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *ExtensionRepoSettingUpdate) SetNillableLink(v *string) *ExtensionRepoSettingUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ExtensionRepoSettingUpdate) SetName(v string) *ExtensionRepoSettingUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ExtensionRepoSettingUpdate) SetNillableName(v *string) *ExtensionRepoSettingUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the ExtensionRepoSettingMutation object of the builder.
func (_u *ExtensionRepoSettingUpdate) Mutation() *ExtensionRepoSettingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExtensionRepoSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionRepoSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExtensionRepoSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionRepoSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionRepoSettingUpdate) check() error {
	if v, ok := _u.mutation.Link(); ok {
		if err := extensionreposetting.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepoSetting.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := extensionreposetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepoSetting.name": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionRepoSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionreposetting.Table, extensionreposetting.Columns, sqlgraph.NewFieldSpec(extensionreposetting.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(extensionreposetting.FieldLink, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(extensionreposetting.FieldName, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionreposetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExtensionRepoSettingUpdateOne is the builder for updating a single ExtensionRepoSetting entity.
type ExtensionRepoSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtensionRepoSettingMutation
}

// SetLink sets the "link" field.
func (_u *ExtensionRepoSettingUpdateOne) SetLink(v string) *ExtensionRepoSettingUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *ExtensionRepoSettingUpdateOne) SetNillableLink(v *string) *ExtensionRepoSettingUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ExtensionRepoSettingUpdateOne) SetName(v string) *ExtensionRepoSettingUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ExtensionRepoSettingUpdateOne) SetNillableName(v *string) *ExtensionRepoSettingUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the ExtensionRepoSettingMutation object of the builder.
func (_u *ExtensionRepoSettingUpdateOne) Mutation() *ExtensionRepoSettingMutation {
	return _u.mutation
}

// Where appends a list predicates to the ExtensionRepoSettingUpdate builder.
func (_u *ExtensionRepoSettingUpdateOne) Where(ps ...predicate.ExtensionRepoSetting) *ExtensionRepoSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExtensionRepoSettingUpdateOne) Select(field string, fields ...string) *ExtensionRepoSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExtensionRepoSetting entity.
func (_u *ExtensionRepoSettingUpdateOne) Save(ctx context.Context) (*ExtensionRepoSetting, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionRepoSettingUpdateOne) SaveX(ctx context.Context) *ExtensionRepoSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExtensionRepoSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionRepoSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionRepoSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Link(); ok {
		if err := extensionreposetting.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepoSetting.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := extensionreposetting.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepoSetting.name": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionRepoSettingUpdateOne) sqlSave(ctx context.Context) (_node *ExtensionRepoSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionreposetting.Table, extensionreposetting.Columns, sqlgraph.NewFieldSpec(extensionreposetting.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExtensionRepoSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extensionreposetting.FieldID)
		for _, f := range fields {
			if !extensionreposetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != extensionreposetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(extensionreposetting.FieldLink, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(extensionreposetting.FieldName, field.TypeString, value)
	}
	_node = &ExtensionRepoSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionreposetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
