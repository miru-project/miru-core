// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/miru-project/miru-core/ent/history"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the history record
	ID int `json:"id,omitempty"`
	// The package identifier
	Package string `json:"package,omitempty"`
	// The URL of the content
	URL string `json:"url,omitempty"`
	// Cover image URL
	Cover *string `json:"cover,omitempty"`
	// Type of content (stored as string representation of enum)
	Type string `json:"type,omitempty"`
	// ID of the episode group
	EpisodeGroupID int `json:"episode_group_id,omitempty"`
	// ID of the episode
	EpisodeID int `json:"episode_id,omitempty"`
	// Title of the content
	Title string `json:"title,omitempty"`
	// Title of the episode
	EpisodeTitle string `json:"episode_title,omitempty"`
	// Current progress in the content
	Progress string `json:"progress,omitempty"`
	// Total progress available
	TotalProgress string `json:"total_progress,omitempty"`
	// Date when the history entry was created/updated
	Date         time.Time `json:"date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldID, history.FieldEpisodeGroupID, history.FieldEpisodeID:
			values[i] = new(sql.NullInt64)
		case history.FieldPackage, history.FieldURL, history.FieldCover, history.FieldType, history.FieldTitle, history.FieldEpisodeTitle, history.FieldProgress, history.FieldTotalProgress:
			values[i] = new(sql.NullString)
		case history.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (_m *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case history.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				_m.Package = value.String
			}
		case history.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case history.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				_m.Cover = new(string)
				*_m.Cover = value.String
			}
		case history.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case history.FieldEpisodeGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episode_group_id", values[i])
			} else if value.Valid {
				_m.EpisodeGroupID = int(value.Int64)
			}
		case history.FieldEpisodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field episode_id", values[i])
			} else if value.Valid {
				_m.EpisodeID = int(value.Int64)
			}
		case history.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case history.FieldEpisodeTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field episode_title", values[i])
			} else if value.Valid {
				_m.EpisodeTitle = value.String
			}
		case history.FieldProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				_m.Progress = value.String
			}
		case history.FieldTotalProgress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_progress", values[i])
			} else if value.Valid {
				_m.TotalProgress = value.String
			}
		case history.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				_m.Date = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (_m *History) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *History) Unwrap() *History {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("package=")
	builder.WriteString(_m.Package)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	if v := _m.Cover; v != nil {
		builder.WriteString("cover=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("episode_group_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.EpisodeGroupID))
	builder.WriteString(", ")
	builder.WriteString("episode_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.EpisodeID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("episode_title=")
	builder.WriteString(_m.EpisodeTitle)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(_m.Progress)
	builder.WriteString(", ")
	builder.WriteString("total_progress=")
	builder.WriteString(_m.TotalProgress)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(_m.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
