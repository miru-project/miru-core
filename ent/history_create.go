// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/history"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetPackage sets the "package" field.
func (hc *HistoryCreate) SetPackage(s string) *HistoryCreate {
	hc.mutation.SetPackage(s)
	return hc
}

// SetURL sets the "url" field.
func (hc *HistoryCreate) SetURL(s string) *HistoryCreate {
	hc.mutation.SetURL(s)
	return hc
}

// SetCover sets the "cover" field.
func (hc *HistoryCreate) SetCover(s string) *HistoryCreate {
	hc.mutation.SetCover(s)
	return hc
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableCover(s *string) *HistoryCreate {
	if s != nil {
		hc.SetCover(*s)
	}
	return hc
}

// SetType sets the "type" field.
func (hc *HistoryCreate) SetType(s string) *HistoryCreate {
	hc.mutation.SetType(s)
	return hc
}

// SetEpisodeGroupID sets the "episode_group_id" field.
func (hc *HistoryCreate) SetEpisodeGroupID(i int) *HistoryCreate {
	hc.mutation.SetEpisodeGroupID(i)
	return hc
}

// SetEpisodeID sets the "episode_id" field.
func (hc *HistoryCreate) SetEpisodeID(i int) *HistoryCreate {
	hc.mutation.SetEpisodeID(i)
	return hc
}

// SetTitle sets the "title" field.
func (hc *HistoryCreate) SetTitle(s string) *HistoryCreate {
	hc.mutation.SetTitle(s)
	return hc
}

// SetEpisodeTitle sets the "episode_title" field.
func (hc *HistoryCreate) SetEpisodeTitle(s string) *HistoryCreate {
	hc.mutation.SetEpisodeTitle(s)
	return hc
}

// SetProgress sets the "progress" field.
func (hc *HistoryCreate) SetProgress(s string) *HistoryCreate {
	hc.mutation.SetProgress(s)
	return hc
}

// SetTotalProgress sets the "total_progress" field.
func (hc *HistoryCreate) SetTotalProgress(s string) *HistoryCreate {
	hc.mutation.SetTotalProgress(s)
	return hc
}

// SetDate sets the "date" field.
func (hc *HistoryCreate) SetDate(t time.Time) *HistoryCreate {
	hc.mutation.SetDate(t)
	return hc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableDate(t *time.Time) *HistoryCreate {
	if t != nil {
		hc.SetDate(*t)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HistoryCreate) SetID(i int) *HistoryCreate {
	hc.mutation.SetID(i)
	return hc
}

// Mutation returns the HistoryMutation object of the builder.
func (hc *HistoryCreate) Mutation() *HistoryMutation {
	return hc.mutation
}

// Save creates the History in the database.
func (hc *HistoryCreate) Save(ctx context.Context) (*History, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HistoryCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HistoryCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HistoryCreate) defaults() {
	if _, ok := hc.mutation.Date(); !ok {
		v := history.DefaultDate()
		hc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HistoryCreate) check() error {
	if _, ok := hc.mutation.Package(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required field "History.package"`)}
	}
	if v, ok := hc.mutation.Package(); ok {
		if err := history.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "History.package": %w`, err)}
		}
	}
	if _, ok := hc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "History.url"`)}
	}
	if v, ok := hc.mutation.URL(); ok {
		if err := history.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "History.url": %w`, err)}
		}
	}
	if _, ok := hc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "History.type"`)}
	}
	if v, ok := hc.mutation.GetType(); ok {
		if err := history.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "History.type": %w`, err)}
		}
	}
	if _, ok := hc.mutation.EpisodeGroupID(); !ok {
		return &ValidationError{Name: "episode_group_id", err: errors.New(`ent: missing required field "History.episode_group_id"`)}
	}
	if _, ok := hc.mutation.EpisodeID(); !ok {
		return &ValidationError{Name: "episode_id", err: errors.New(`ent: missing required field "History.episode_id"`)}
	}
	if _, ok := hc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "History.title"`)}
	}
	if v, ok := hc.mutation.Title(); ok {
		if err := history.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "History.title": %w`, err)}
		}
	}
	if _, ok := hc.mutation.EpisodeTitle(); !ok {
		return &ValidationError{Name: "episode_title", err: errors.New(`ent: missing required field "History.episode_title"`)}
	}
	if v, ok := hc.mutation.EpisodeTitle(); ok {
		if err := history.EpisodeTitleValidator(v); err != nil {
			return &ValidationError{Name: "episode_title", err: fmt.Errorf(`ent: validator failed for field "History.episode_title": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "History.progress"`)}
	}
	if v, ok := hc.mutation.Progress(); ok {
		if err := history.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "History.progress": %w`, err)}
		}
	}
	if _, ok := hc.mutation.TotalProgress(); !ok {
		return &ValidationError{Name: "total_progress", err: errors.New(`ent: missing required field "History.total_progress"`)}
	}
	if v, ok := hc.mutation.TotalProgress(); ok {
		if err := history.TotalProgressValidator(v); err != nil {
			return &ValidationError{Name: "total_progress", err: fmt.Errorf(`ent: validator failed for field "History.total_progress": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "History.date"`)}
	}
	if v, ok := hc.mutation.ID(); ok {
		if err := history.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "History.id": %w`, err)}
		}
	}
	return nil
}

func (hc *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Package(); ok {
		_spec.SetField(history.FieldPackage, field.TypeString, value)
		_node.Package = value
	}
	if value, ok := hc.mutation.URL(); ok {
		_spec.SetField(history.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := hc.mutation.Cover(); ok {
		_spec.SetField(history.FieldCover, field.TypeString, value)
		_node.Cover = &value
	}
	if value, ok := hc.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := hc.mutation.EpisodeGroupID(); ok {
		_spec.SetField(history.FieldEpisodeGroupID, field.TypeInt, value)
		_node.EpisodeGroupID = value
	}
	if value, ok := hc.mutation.EpisodeID(); ok {
		_spec.SetField(history.FieldEpisodeID, field.TypeInt, value)
		_node.EpisodeID = value
	}
	if value, ok := hc.mutation.Title(); ok {
		_spec.SetField(history.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := hc.mutation.EpisodeTitle(); ok {
		_spec.SetField(history.FieldEpisodeTitle, field.TypeString, value)
		_node.EpisodeTitle = value
	}
	if value, ok := hc.mutation.Progress(); ok {
		_spec.SetField(history.FieldProgress, field.TypeString, value)
		_node.Progress = value
	}
	if value, ok := hc.mutation.TotalProgress(); ok {
		_spec.SetField(history.FieldTotalProgress, field.TypeString, value)
		_node.TotalProgress = value
	}
	if value, ok := hc.mutation.Date(); ok {
		_spec.SetField(history.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	err      error
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (hcb *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*History, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
