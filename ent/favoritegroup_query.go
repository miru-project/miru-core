// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/favorite"
	"github.com/miru-project/miru-core/ent/favoritegroup"
	"github.com/miru-project/miru-core/ent/predicate"
)

// FavoriteGroupQuery is the builder for querying FavoriteGroup entities.
type FavoriteGroupQuery struct {
	config
	ctx           *QueryContext
	order         []favoritegroup.OrderOption
	inters        []Interceptor
	predicates    []predicate.FavoriteGroup
	withFavorites *FavoriteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FavoriteGroupQuery builder.
func (fgq *FavoriteGroupQuery) Where(ps ...predicate.FavoriteGroup) *FavoriteGroupQuery {
	fgq.predicates = append(fgq.predicates, ps...)
	return fgq
}

// Limit the number of records to be returned by this query.
func (fgq *FavoriteGroupQuery) Limit(limit int) *FavoriteGroupQuery {
	fgq.ctx.Limit = &limit
	return fgq
}

// Offset to start from.
func (fgq *FavoriteGroupQuery) Offset(offset int) *FavoriteGroupQuery {
	fgq.ctx.Offset = &offset
	return fgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fgq *FavoriteGroupQuery) Unique(unique bool) *FavoriteGroupQuery {
	fgq.ctx.Unique = &unique
	return fgq
}

// Order specifies how the records should be ordered.
func (fgq *FavoriteGroupQuery) Order(o ...favoritegroup.OrderOption) *FavoriteGroupQuery {
	fgq.order = append(fgq.order, o...)
	return fgq
}

// QueryFavorites chains the current query on the "favorites" edge.
func (fgq *FavoriteGroupQuery) QueryFavorites() *FavoriteQuery {
	query := (&FavoriteClient{config: fgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(favoritegroup.Table, favoritegroup.FieldID, selector),
			sqlgraph.To(favorite.Table, favorite.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, favoritegroup.FavoritesTable, favoritegroup.FavoritesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FavoriteGroup entity from the query.
// Returns a *NotFoundError when no FavoriteGroup was found.
func (fgq *FavoriteGroupQuery) First(ctx context.Context) (*FavoriteGroup, error) {
	nodes, err := fgq.Limit(1).All(setContextOp(ctx, fgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{favoritegroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) FirstX(ctx context.Context) *FavoriteGroup {
	node, err := fgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FavoriteGroup ID from the query.
// Returns a *NotFoundError when no FavoriteGroup ID was found.
func (fgq *FavoriteGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fgq.Limit(1).IDs(setContextOp(ctx, fgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{favoritegroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := fgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FavoriteGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FavoriteGroup entity is found.
// Returns a *NotFoundError when no FavoriteGroup entities are found.
func (fgq *FavoriteGroupQuery) Only(ctx context.Context) (*FavoriteGroup, error) {
	nodes, err := fgq.Limit(2).All(setContextOp(ctx, fgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{favoritegroup.Label}
	default:
		return nil, &NotSingularError{favoritegroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) OnlyX(ctx context.Context) *FavoriteGroup {
	node, err := fgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FavoriteGroup ID in the query.
// Returns a *NotSingularError when more than one FavoriteGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (fgq *FavoriteGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fgq.Limit(2).IDs(setContextOp(ctx, fgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{favoritegroup.Label}
	default:
		err = &NotSingularError{favoritegroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := fgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FavoriteGroups.
func (fgq *FavoriteGroupQuery) All(ctx context.Context) ([]*FavoriteGroup, error) {
	ctx = setContextOp(ctx, fgq.ctx, ent.OpQueryAll)
	if err := fgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FavoriteGroup, *FavoriteGroupQuery]()
	return withInterceptors[[]*FavoriteGroup](ctx, fgq, qr, fgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) AllX(ctx context.Context) []*FavoriteGroup {
	nodes, err := fgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FavoriteGroup IDs.
func (fgq *FavoriteGroupQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fgq.ctx.Unique == nil && fgq.path != nil {
		fgq.Unique(true)
	}
	ctx = setContextOp(ctx, fgq.ctx, ent.OpQueryIDs)
	if err = fgq.Select(favoritegroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := fgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fgq *FavoriteGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fgq.ctx, ent.OpQueryCount)
	if err := fgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fgq, querierCount[*FavoriteGroupQuery](), fgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) CountX(ctx context.Context) int {
	count, err := fgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fgq *FavoriteGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fgq.ctx, ent.OpQueryExist)
	switch _, err := fgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fgq *FavoriteGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := fgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FavoriteGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fgq *FavoriteGroupQuery) Clone() *FavoriteGroupQuery {
	if fgq == nil {
		return nil
	}
	return &FavoriteGroupQuery{
		config:        fgq.config,
		ctx:           fgq.ctx.Clone(),
		order:         append([]favoritegroup.OrderOption{}, fgq.order...),
		inters:        append([]Interceptor{}, fgq.inters...),
		predicates:    append([]predicate.FavoriteGroup{}, fgq.predicates...),
		withFavorites: fgq.withFavorites.Clone(),
		// clone intermediate query.
		sql:  fgq.sql.Clone(),
		path: fgq.path,
	}
}

// WithFavorites tells the query-builder to eager-load the nodes that are connected to
// the "favorites" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FavoriteGroupQuery) WithFavorites(opts ...func(*FavoriteQuery)) *FavoriteGroupQuery {
	query := (&FavoriteClient{config: fgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fgq.withFavorites = query
	return fgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FavoriteGroup.Query().
//		GroupBy(favoritegroup.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fgq *FavoriteGroupQuery) GroupBy(field string, fields ...string) *FavoriteGroupGroupBy {
	fgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FavoriteGroupGroupBy{build: fgq}
	grbuild.flds = &fgq.ctx.Fields
	grbuild.label = favoritegroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.FavoriteGroup.Query().
//		Select(favoritegroup.FieldName).
//		Scan(ctx, &v)
func (fgq *FavoriteGroupQuery) Select(fields ...string) *FavoriteGroupSelect {
	fgq.ctx.Fields = append(fgq.ctx.Fields, fields...)
	sbuild := &FavoriteGroupSelect{FavoriteGroupQuery: fgq}
	sbuild.label = favoritegroup.Label
	sbuild.flds, sbuild.scan = &fgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FavoriteGroupSelect configured with the given aggregations.
func (fgq *FavoriteGroupQuery) Aggregate(fns ...AggregateFunc) *FavoriteGroupSelect {
	return fgq.Select().Aggregate(fns...)
}

func (fgq *FavoriteGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fgq); err != nil {
				return err
			}
		}
	}
	for _, f := range fgq.ctx.Fields {
		if !favoritegroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fgq.path != nil {
		prev, err := fgq.path(ctx)
		if err != nil {
			return err
		}
		fgq.sql = prev
	}
	return nil
}

func (fgq *FavoriteGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FavoriteGroup, error) {
	var (
		nodes       = []*FavoriteGroup{}
		_spec       = fgq.querySpec()
		loadedTypes = [1]bool{
			fgq.withFavorites != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FavoriteGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FavoriteGroup{config: fgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fgq.withFavorites; query != nil {
		if err := fgq.loadFavorites(ctx, query, nodes,
			func(n *FavoriteGroup) { n.Edges.Favorites = []*Favorite{} },
			func(n *FavoriteGroup, e *Favorite) { n.Edges.Favorites = append(n.Edges.Favorites, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fgq *FavoriteGroupQuery) loadFavorites(ctx context.Context, query *FavoriteQuery, nodes []*FavoriteGroup, init func(*FavoriteGroup), assign func(*FavoriteGroup, *Favorite)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*FavoriteGroup)
	nids := make(map[int]map[*FavoriteGroup]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(favoritegroup.FavoritesTable)
		s.Join(joinT).On(s.C(favorite.FieldID), joinT.C(favoritegroup.FavoritesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(favoritegroup.FavoritesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(favoritegroup.FavoritesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*FavoriteGroup]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Favorite](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "favorites" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (fgq *FavoriteGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fgq.querySpec()
	_spec.Node.Columns = fgq.ctx.Fields
	if len(fgq.ctx.Fields) > 0 {
		_spec.Unique = fgq.ctx.Unique != nil && *fgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fgq.driver, _spec)
}

func (fgq *FavoriteGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(favoritegroup.Table, favoritegroup.Columns, sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt))
	_spec.From = fgq.sql
	if unique := fgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fgq.path != nil {
		_spec.Unique = true
	}
	if fields := fgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favoritegroup.FieldID)
		for i := range fields {
			if fields[i] != favoritegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fgq *FavoriteGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fgq.driver.Dialect())
	t1 := builder.Table(favoritegroup.Table)
	columns := fgq.ctx.Fields
	if len(columns) == 0 {
		columns = favoritegroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fgq.sql != nil {
		selector = fgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fgq.ctx.Unique != nil && *fgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fgq.predicates {
		p(selector)
	}
	for _, p := range fgq.order {
		p(selector)
	}
	if offset := fgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FavoriteGroupGroupBy is the group-by builder for FavoriteGroup entities.
type FavoriteGroupGroupBy struct {
	selector
	build *FavoriteGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fggb *FavoriteGroupGroupBy) Aggregate(fns ...AggregateFunc) *FavoriteGroupGroupBy {
	fggb.fns = append(fggb.fns, fns...)
	return fggb
}

// Scan applies the selector query and scans the result into the given value.
func (fggb *FavoriteGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fggb.build.ctx, ent.OpQueryGroupBy)
	if err := fggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FavoriteGroupQuery, *FavoriteGroupGroupBy](ctx, fggb.build, fggb, fggb.build.inters, v)
}

func (fggb *FavoriteGroupGroupBy) sqlScan(ctx context.Context, root *FavoriteGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fggb.fns))
	for _, fn := range fggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fggb.flds)+len(fggb.fns))
		for _, f := range *fggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FavoriteGroupSelect is the builder for selecting fields of FavoriteGroup entities.
type FavoriteGroupSelect struct {
	*FavoriteGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fgs *FavoriteGroupSelect) Aggregate(fns ...AggregateFunc) *FavoriteGroupSelect {
	fgs.fns = append(fgs.fns, fns...)
	return fgs
}

// Scan applies the selector query and scans the result into the given value.
func (fgs *FavoriteGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgs.ctx, ent.OpQuerySelect)
	if err := fgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FavoriteGroupQuery, *FavoriteGroupSelect](ctx, fgs.FavoriteGroupQuery, fgs, fgs.inters, v)
}

func (fgs *FavoriteGroupSelect) sqlScan(ctx context.Context, root *FavoriteGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fgs.fns))
	for _, fn := range fgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
