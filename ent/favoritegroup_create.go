// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/favorite"
	"github.com/miru-project/miru-core/ent/favoritegroup"
)

// FavoriteGroupCreate is the builder for creating a FavoriteGroup entity.
type FavoriteGroupCreate struct {
	config
	mutation *FavoriteGroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fgc *FavoriteGroupCreate) SetName(s string) *FavoriteGroupCreate {
	fgc.mutation.SetName(s)
	return fgc
}

// SetDate sets the "date" field.
func (fgc *FavoriteGroupCreate) SetDate(t time.Time) *FavoriteGroupCreate {
	fgc.mutation.SetDate(t)
	return fgc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fgc *FavoriteGroupCreate) SetNillableDate(t *time.Time) *FavoriteGroupCreate {
	if t != nil {
		fgc.SetDate(*t)
	}
	return fgc
}

// SetID sets the "id" field.
func (fgc *FavoriteGroupCreate) SetID(i int) *FavoriteGroupCreate {
	fgc.mutation.SetID(i)
	return fgc
}

// AddFavoriteIDs adds the "favorites" edge to the Favorite entity by IDs.
func (fgc *FavoriteGroupCreate) AddFavoriteIDs(ids ...int) *FavoriteGroupCreate {
	fgc.mutation.AddFavoriteIDs(ids...)
	return fgc
}

// AddFavorites adds the "favorites" edges to the Favorite entity.
func (fgc *FavoriteGroupCreate) AddFavorites(f ...*Favorite) *FavoriteGroupCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgc.AddFavoriteIDs(ids...)
}

// Mutation returns the FavoriteGroupMutation object of the builder.
func (fgc *FavoriteGroupCreate) Mutation() *FavoriteGroupMutation {
	return fgc.mutation
}

// Save creates the FavoriteGroup in the database.
func (fgc *FavoriteGroupCreate) Save(ctx context.Context) (*FavoriteGroup, error) {
	fgc.defaults()
	return withHooks(ctx, fgc.sqlSave, fgc.mutation, fgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fgc *FavoriteGroupCreate) SaveX(ctx context.Context) *FavoriteGroup {
	v, err := fgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fgc *FavoriteGroupCreate) Exec(ctx context.Context) error {
	_, err := fgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgc *FavoriteGroupCreate) ExecX(ctx context.Context) {
	if err := fgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fgc *FavoriteGroupCreate) defaults() {
	if _, ok := fgc.mutation.Date(); !ok {
		v := favoritegroup.DefaultDate()
		fgc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fgc *FavoriteGroupCreate) check() error {
	if _, ok := fgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FavoriteGroup.name"`)}
	}
	if v, ok := fgc.mutation.Name(); ok {
		if err := favoritegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FavoriteGroup.name": %w`, err)}
		}
	}
	if _, ok := fgc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "FavoriteGroup.date"`)}
	}
	if v, ok := fgc.mutation.ID(); ok {
		if err := favoritegroup.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FavoriteGroup.id": %w`, err)}
		}
	}
	return nil
}

func (fgc *FavoriteGroupCreate) sqlSave(ctx context.Context) (*FavoriteGroup, error) {
	if err := fgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fgc.mutation.id = &_node.ID
	fgc.mutation.done = true
	return _node, nil
}

func (fgc *FavoriteGroupCreate) createSpec() (*FavoriteGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &FavoriteGroup{config: fgc.config}
		_spec = sqlgraph.NewCreateSpec(favoritegroup.Table, sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt))
	)
	if id, ok := fgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fgc.mutation.Name(); ok {
		_spec.SetField(favoritegroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fgc.mutation.Date(); ok {
		_spec.SetField(favoritegroup.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := fgc.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FavoriteGroupCreateBulk is the builder for creating many FavoriteGroup entities in bulk.
type FavoriteGroupCreateBulk struct {
	config
	err      error
	builders []*FavoriteGroupCreate
}

// Save creates the FavoriteGroup entities in the database.
func (fgcb *FavoriteGroupCreateBulk) Save(ctx context.Context) ([]*FavoriteGroup, error) {
	if fgcb.err != nil {
		return nil, fgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fgcb.builders))
	nodes := make([]*FavoriteGroup, len(fgcb.builders))
	mutators := make([]Mutator, len(fgcb.builders))
	for i := range fgcb.builders {
		func(i int, root context.Context) {
			builder := fgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fgcb *FavoriteGroupCreateBulk) SaveX(ctx context.Context) []*FavoriteGroup {
	v, err := fgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fgcb *FavoriteGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := fgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgcb *FavoriteGroupCreateBulk) ExecX(ctx context.Context) {
	if err := fgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
