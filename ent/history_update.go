// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/history"
	"github.com/miru-project/miru-core/ent/predicate"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	hooks    []Hook
	mutation *HistoryMutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (_u *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPackage sets the "package" field.
func (_u *HistoryUpdate) SetPackage(v string) *HistoryUpdate {
	_u.mutation.SetPackage(v)
	return _u
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillablePackage(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetPackage(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *HistoryUpdate) SetURL(v string) *HistoryUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableURL(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetCover sets the "cover" field.
func (_u *HistoryUpdate) SetCover(v string) *HistoryUpdate {
	_u.mutation.SetCover(v)
	return _u
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableCover(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetCover(*v)
	}
	return _u
}

// ClearCover clears the value of the "cover" field.
func (_u *HistoryUpdate) ClearCover() *HistoryUpdate {
	_u.mutation.ClearCover()
	return _u
}

// SetType sets the "type" field.
func (_u *HistoryUpdate) SetType(v string) *HistoryUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableType(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetEpisodeGroupID sets the "episode_group_id" field.
func (_u *HistoryUpdate) SetEpisodeGroupID(v int) *HistoryUpdate {
	_u.mutation.ResetEpisodeGroupID()
	_u.mutation.SetEpisodeGroupID(v)
	return _u
}

// SetNillableEpisodeGroupID sets the "episode_group_id" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableEpisodeGroupID(v *int) *HistoryUpdate {
	if v != nil {
		_u.SetEpisodeGroupID(*v)
	}
	return _u
}

// AddEpisodeGroupID adds value to the "episode_group_id" field.
func (_u *HistoryUpdate) AddEpisodeGroupID(v int) *HistoryUpdate {
	_u.mutation.AddEpisodeGroupID(v)
	return _u
}

// SetEpisodeID sets the "episode_id" field.
func (_u *HistoryUpdate) SetEpisodeID(v int) *HistoryUpdate {
	_u.mutation.ResetEpisodeID()
	_u.mutation.SetEpisodeID(v)
	return _u
}

// SetNillableEpisodeID sets the "episode_id" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableEpisodeID(v *int) *HistoryUpdate {
	if v != nil {
		_u.SetEpisodeID(*v)
	}
	return _u
}

// AddEpisodeID adds value to the "episode_id" field.
func (_u *HistoryUpdate) AddEpisodeID(v int) *HistoryUpdate {
	_u.mutation.AddEpisodeID(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *HistoryUpdate) SetTitle(v string) *HistoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableTitle(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetEpisodeTitle sets the "episode_title" field.
func (_u *HistoryUpdate) SetEpisodeTitle(v string) *HistoryUpdate {
	_u.mutation.SetEpisodeTitle(v)
	return _u
}

// SetNillableEpisodeTitle sets the "episode_title" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableEpisodeTitle(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetEpisodeTitle(*v)
	}
	return _u
}

// SetProgress sets the "progress" field.
func (_u *HistoryUpdate) SetProgress(v string) *HistoryUpdate {
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableProgress(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// SetTotalProgress sets the "total_progress" field.
func (_u *HistoryUpdate) SetTotalProgress(v string) *HistoryUpdate {
	_u.mutation.SetTotalProgress(v)
	return _u
}

// SetNillableTotalProgress sets the "total_progress" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableTotalProgress(v *string) *HistoryUpdate {
	if v != nil {
		_u.SetTotalProgress(*v)
	}
	return _u
}

// SetDate sets the "date" field.
func (_u *HistoryUpdate) SetDate(v time.Time) *HistoryUpdate {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *HistoryUpdate) SetNillableDate(v *time.Time) *HistoryUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// Mutation returns the HistoryMutation object of the builder.
func (_u *HistoryUpdate) Mutation() *HistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HistoryUpdate) check() error {
	if v, ok := _u.mutation.Package(); ok {
		if err := history.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "History.package": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := history.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "History.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := history.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "History.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := history.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "History.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EpisodeTitle(); ok {
		if err := history.EpisodeTitleValidator(v); err != nil {
			return &ValidationError{Name: "episode_title", err: fmt.Errorf(`ent: validator failed for field "History.episode_title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Progress(); ok {
		if err := history.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "History.progress": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TotalProgress(); ok {
		if err := history.TotalProgressValidator(v); err != nil {
			return &ValidationError{Name: "total_progress", err: fmt.Errorf(`ent: validator failed for field "History.total_progress": %w`, err)}
		}
	}
	return nil
}

func (_u *HistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Package(); ok {
		_spec.SetField(history.FieldPackage, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(history.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cover(); ok {
		_spec.SetField(history.FieldCover, field.TypeString, value)
	}
	if _u.mutation.CoverCleared() {
		_spec.ClearField(history.FieldCover, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.EpisodeGroupID(); ok {
		_spec.SetField(history.FieldEpisodeGroupID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeGroupID(); ok {
		_spec.AddField(history.FieldEpisodeGroupID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EpisodeID(); ok {
		_spec.SetField(history.FieldEpisodeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeID(); ok {
		_spec.AddField(history.FieldEpisodeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(history.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.EpisodeTitle(); ok {
		_spec.SetField(history.FieldEpisodeTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(history.FieldProgress, field.TypeString, value)
	}
	if value, ok := _u.mutation.TotalProgress(); ok {
		_spec.SetField(history.FieldTotalProgress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(history.FieldDate, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoryMutation
}

// SetPackage sets the "package" field.
func (_u *HistoryUpdateOne) SetPackage(v string) *HistoryUpdateOne {
	_u.mutation.SetPackage(v)
	return _u
}

// SetNillablePackage sets the "package" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillablePackage(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetPackage(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *HistoryUpdateOne) SetURL(v string) *HistoryUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableURL(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetCover sets the "cover" field.
func (_u *HistoryUpdateOne) SetCover(v string) *HistoryUpdateOne {
	_u.mutation.SetCover(v)
	return _u
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableCover(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetCover(*v)
	}
	return _u
}

// ClearCover clears the value of the "cover" field.
func (_u *HistoryUpdateOne) ClearCover() *HistoryUpdateOne {
	_u.mutation.ClearCover()
	return _u
}

// SetType sets the "type" field.
func (_u *HistoryUpdateOne) SetType(v string) *HistoryUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableType(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetEpisodeGroupID sets the "episode_group_id" field.
func (_u *HistoryUpdateOne) SetEpisodeGroupID(v int) *HistoryUpdateOne {
	_u.mutation.ResetEpisodeGroupID()
	_u.mutation.SetEpisodeGroupID(v)
	return _u
}

// SetNillableEpisodeGroupID sets the "episode_group_id" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableEpisodeGroupID(v *int) *HistoryUpdateOne {
	if v != nil {
		_u.SetEpisodeGroupID(*v)
	}
	return _u
}

// AddEpisodeGroupID adds value to the "episode_group_id" field.
func (_u *HistoryUpdateOne) AddEpisodeGroupID(v int) *HistoryUpdateOne {
	_u.mutation.AddEpisodeGroupID(v)
	return _u
}

// SetEpisodeID sets the "episode_id" field.
func (_u *HistoryUpdateOne) SetEpisodeID(v int) *HistoryUpdateOne {
	_u.mutation.ResetEpisodeID()
	_u.mutation.SetEpisodeID(v)
	return _u
}

// SetNillableEpisodeID sets the "episode_id" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableEpisodeID(v *int) *HistoryUpdateOne {
	if v != nil {
		_u.SetEpisodeID(*v)
	}
	return _u
}

// AddEpisodeID adds value to the "episode_id" field.
func (_u *HistoryUpdateOne) AddEpisodeID(v int) *HistoryUpdateOne {
	_u.mutation.AddEpisodeID(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *HistoryUpdateOne) SetTitle(v string) *HistoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableTitle(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetEpisodeTitle sets the "episode_title" field.
func (_u *HistoryUpdateOne) SetEpisodeTitle(v string) *HistoryUpdateOne {
	_u.mutation.SetEpisodeTitle(v)
	return _u
}

// SetNillableEpisodeTitle sets the "episode_title" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableEpisodeTitle(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetEpisodeTitle(*v)
	}
	return _u
}

// SetProgress sets the "progress" field.
func (_u *HistoryUpdateOne) SetProgress(v string) *HistoryUpdateOne {
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableProgress(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// SetTotalProgress sets the "total_progress" field.
func (_u *HistoryUpdateOne) SetTotalProgress(v string) *HistoryUpdateOne {
	_u.mutation.SetTotalProgress(v)
	return _u
}

// SetNillableTotalProgress sets the "total_progress" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableTotalProgress(v *string) *HistoryUpdateOne {
	if v != nil {
		_u.SetTotalProgress(*v)
	}
	return _u
}

// SetDate sets the "date" field.
func (_u *HistoryUpdateOne) SetDate(v time.Time) *HistoryUpdateOne {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *HistoryUpdateOne) SetNillableDate(v *time.Time) *HistoryUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// Mutation returns the HistoryMutation object of the builder.
func (_u *HistoryUpdateOne) Mutation() *HistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the HistoryUpdate builder.
func (_u *HistoryUpdateOne) Where(ps ...predicate.History) *HistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HistoryUpdateOne) Select(field string, fields ...string) *HistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated History entity.
func (_u *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Package(); ok {
		if err := history.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "History.package": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := history.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "History.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := history.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "History.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := history.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "History.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EpisodeTitle(); ok {
		if err := history.EpisodeTitleValidator(v); err != nil {
			return &ValidationError{Name: "episode_title", err: fmt.Errorf(`ent: validator failed for field "History.episode_title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Progress(); ok {
		if err := history.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "History.progress": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TotalProgress(); ok {
		if err := history.TotalProgressValidator(v); err != nil {
			return &ValidationError{Name: "total_progress", err: fmt.Errorf(`ent: validator failed for field "History.total_progress": %w`, err)}
		}
	}
	return nil
}

func (_u *HistoryUpdateOne) sqlSave(ctx context.Context) (_node *History, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(history.Table, history.Columns, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "History.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, history.FieldID)
		for _, f := range fields {
			if !history.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != history.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Package(); ok {
		_spec.SetField(history.FieldPackage, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(history.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cover(); ok {
		_spec.SetField(history.FieldCover, field.TypeString, value)
	}
	if _u.mutation.CoverCleared() {
		_spec.ClearField(history.FieldCover, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(history.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.EpisodeGroupID(); ok {
		_spec.SetField(history.FieldEpisodeGroupID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeGroupID(); ok {
		_spec.AddField(history.FieldEpisodeGroupID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EpisodeID(); ok {
		_spec.SetField(history.FieldEpisodeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeID(); ok {
		_spec.AddField(history.FieldEpisodeID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(history.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.EpisodeTitle(); ok {
		_spec.SetField(history.FieldEpisodeTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(history.FieldProgress, field.TypeString, value)
	}
	if value, ok := _u.mutation.TotalProgress(); ok {
		_spec.SetField(history.FieldTotalProgress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(history.FieldDate, field.TypeTime, value)
	}
	_node = &History{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
