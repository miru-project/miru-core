// Code generated by ent, DO NOT EDIT.

package favorite

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/miru-project/miru-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldID, id))
}

// Package applies equality check predicate on the "package" field. It's identical to PackageEQ.
func Package(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldPackage, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldURL, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldType, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldTitle, v))
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldCover, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldDate, v))
}

// PackageEQ applies the EQ predicate on the "package" field.
func PackageEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldPackage, v))
}

// PackageNEQ applies the NEQ predicate on the "package" field.
func PackageNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldPackage, v))
}

// PackageIn applies the In predicate on the "package" field.
func PackageIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldPackage, vs...))
}

// PackageNotIn applies the NotIn predicate on the "package" field.
func PackageNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldPackage, vs...))
}

// PackageGT applies the GT predicate on the "package" field.
func PackageGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldPackage, v))
}

// PackageGTE applies the GTE predicate on the "package" field.
func PackageGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldPackage, v))
}

// PackageLT applies the LT predicate on the "package" field.
func PackageLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldPackage, v))
}

// PackageLTE applies the LTE predicate on the "package" field.
func PackageLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldPackage, v))
}

// PackageContains applies the Contains predicate on the "package" field.
func PackageContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldPackage, v))
}

// PackageHasPrefix applies the HasPrefix predicate on the "package" field.
func PackageHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldPackage, v))
}

// PackageHasSuffix applies the HasSuffix predicate on the "package" field.
func PackageHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldPackage, v))
}

// PackageEqualFold applies the EqualFold predicate on the "package" field.
func PackageEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldPackage, v))
}

// PackageContainsFold applies the ContainsFold predicate on the "package" field.
func PackageContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldPackage, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldType, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldTitle, v))
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldCover, v))
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldCover, v))
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldCover, vs...))
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldCover, vs...))
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldCover, v))
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldCover, v))
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldCover, v))
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldCover, v))
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldCover, v))
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldCover, v))
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldCover, v))
}

// CoverIsNil applies the IsNil predicate on the "cover" field.
func CoverIsNil() predicate.Favorite {
	return predicate.Favorite(sql.FieldIsNull(FieldCover))
}

// CoverNotNil applies the NotNil predicate on the "cover" field.
func CoverNotNil() predicate.Favorite {
	return predicate.Favorite(sql.FieldNotNull(FieldCover))
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldCover, v))
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldCover, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldDate, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GroupTable, GroupPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.FavoriteGroup) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.NotPredicates(p))
}
