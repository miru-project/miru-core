// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/extensionrepo"
	"github.com/miru-project/miru-core/ent/predicate"
)

// ExtensionRepoUpdate is the builder for updating ExtensionRepo entities.
type ExtensionRepoUpdate struct {
	config
	hooks    []Hook
	mutation *ExtensionRepoMutation
}

// Where appends a list predicates to the ExtensionRepoUpdate builder.
func (_u *ExtensionRepoUpdate) Where(ps ...predicate.ExtensionRepo) *ExtensionRepoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetURL sets the "url" field.
func (_u *ExtensionRepoUpdate) SetURL(v string) *ExtensionRepoUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *ExtensionRepoUpdate) SetNillableURL(v *string) *ExtensionRepoUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ExtensionRepoUpdate) SetName(v string) *ExtensionRepoUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ExtensionRepoUpdate) SetNillableName(v *string) *ExtensionRepoUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the ExtensionRepoMutation object of the builder.
func (_u *ExtensionRepoUpdate) Mutation() *ExtensionRepoMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExtensionRepoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionRepoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExtensionRepoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionRepoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionRepoUpdate) check() error {
	if v, ok := _u.mutation.URL(); ok {
		if err := extensionrepo.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepo.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := extensionrepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepo.name": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionRepoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionrepo.Table, extensionrepo.Columns, sqlgraph.NewFieldSpec(extensionrepo.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(extensionrepo.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(extensionrepo.FieldName, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExtensionRepoUpdateOne is the builder for updating a single ExtensionRepo entity.
type ExtensionRepoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtensionRepoMutation
}

// SetURL sets the "url" field.
func (_u *ExtensionRepoUpdateOne) SetURL(v string) *ExtensionRepoUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *ExtensionRepoUpdateOne) SetNillableURL(v *string) *ExtensionRepoUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ExtensionRepoUpdateOne) SetName(v string) *ExtensionRepoUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ExtensionRepoUpdateOne) SetNillableName(v *string) *ExtensionRepoUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the ExtensionRepoMutation object of the builder.
func (_u *ExtensionRepoUpdateOne) Mutation() *ExtensionRepoMutation {
	return _u.mutation
}

// Where appends a list predicates to the ExtensionRepoUpdate builder.
func (_u *ExtensionRepoUpdateOne) Where(ps ...predicate.ExtensionRepo) *ExtensionRepoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExtensionRepoUpdateOne) Select(field string, fields ...string) *ExtensionRepoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExtensionRepo entity.
func (_u *ExtensionRepoUpdateOne) Save(ctx context.Context) (*ExtensionRepo, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExtensionRepoUpdateOne) SaveX(ctx context.Context) *ExtensionRepo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExtensionRepoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExtensionRepoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ExtensionRepoUpdateOne) check() error {
	if v, ok := _u.mutation.URL(); ok {
		if err := extensionrepo.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepo.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := extensionrepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionRepo.name": %w`, err)}
		}
	}
	return nil
}

func (_u *ExtensionRepoUpdateOne) sqlSave(ctx context.Context) (_node *ExtensionRepo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(extensionrepo.Table, extensionrepo.Columns, sqlgraph.NewFieldSpec(extensionrepo.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExtensionRepo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extensionrepo.FieldID)
		for _, f := range fields {
			if !extensionrepo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != extensionrepo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(extensionrepo.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(extensionrepo.FieldName, field.TypeString, value)
	}
	_node = &ExtensionRepo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
