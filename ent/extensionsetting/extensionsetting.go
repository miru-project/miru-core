// Code generated by ent, DO NOT EDIT.

package extensionsetting

import (
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the extensionsetting type in the database.
	Label = "extension_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackage holds the string denoting the package field in the database.
	FieldPackage = "package"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldDefaultValue holds the string denoting the default_value field in the database.
	FieldDefaultValue = "default_value"
	// FieldDbType holds the string denoting the db_type field in the database.
	FieldDbType = "db_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// Table holds the table name of the extensionsetting in the database.
	Table = "extension_settings"
)

// Columns holds all SQL columns for extensionsetting fields.
var Columns = []string{
	FieldID,
	FieldPackage,
	FieldTitle,
	FieldKey,
	FieldValue,
	FieldDefaultValue,
	FieldDbType,
	FieldDescription,
	FieldOptions,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/miru-project/miru-core/ent/runtime"
var (
	Hooks [1]ent.Hook
	// PackageValidator is a validator for the "package" field. It is called by the builders before save.
	PackageValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// DefaultDefaultValue holds the default value on creation for the "default_value" field.
	DefaultDefaultValue string
	// DefaultValueValidator is a validator for the "default_value" field. It is called by the builders before save.
	DefaultValueValidator func(string) error
)

// DbType defines the type for the "db_type" enum field.
type DbType string

// DbTypeInput is the default value of the DbType enum.
const DefaultDbType = DbTypeInput

// DbType values.
const (
	DbTypeInput  DbType = "input"
	DbTypeRadio  DbType = "radio"
	DbTypeToggle DbType = "toggle"
)

func (dt DbType) String() string {
	return string(dt)
}

// DbTypeValidator is a validator for the "db_type" field enum values. It is called by the builders before save.
func DbTypeValidator(dt DbType) error {
	switch dt {
	case DbTypeInput, DbTypeRadio, DbTypeToggle:
		return nil
	default:
		return fmt.Errorf("extensionsetting: invalid enum value for db_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the ExtensionSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackage orders the results by the package field.
func ByPackage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackage, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByDefaultValue orders the results by the default_value field.
func ByDefaultValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultValue, opts...).ToFunc()
}

// ByDbType orders the results by the db_type field.
func ByDbType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDbType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOptions orders the results by the options field.
func ByOptions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptions, opts...).ToFunc()
}
