// Code generated by ent, DO NOT EDIT.

package extensionsetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/miru-project/miru-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldID, id))
}

// Package applies equality check predicate on the "package" field. It's identical to PackageEQ.
func Package(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldPackage, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldTitle, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldKey, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldValue, v))
}

// DefaultValue applies equality check predicate on the "default_value" field. It's identical to DefaultValueEQ.
func DefaultValue(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldDefaultValue, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldDescription, v))
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldOptions, v))
}

// PackageEQ applies the EQ predicate on the "package" field.
func PackageEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldPackage, v))
}

// PackageNEQ applies the NEQ predicate on the "package" field.
func PackageNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldPackage, v))
}

// PackageIn applies the In predicate on the "package" field.
func PackageIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldPackage, vs...))
}

// PackageNotIn applies the NotIn predicate on the "package" field.
func PackageNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldPackage, vs...))
}

// PackageGT applies the GT predicate on the "package" field.
func PackageGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldPackage, v))
}

// PackageGTE applies the GTE predicate on the "package" field.
func PackageGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldPackage, v))
}

// PackageLT applies the LT predicate on the "package" field.
func PackageLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldPackage, v))
}

// PackageLTE applies the LTE predicate on the "package" field.
func PackageLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldPackage, v))
}

// PackageContains applies the Contains predicate on the "package" field.
func PackageContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldPackage, v))
}

// PackageHasPrefix applies the HasPrefix predicate on the "package" field.
func PackageHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldPackage, v))
}

// PackageHasSuffix applies the HasSuffix predicate on the "package" field.
func PackageHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldPackage, v))
}

// PackageEqualFold applies the EqualFold predicate on the "package" field.
func PackageEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldPackage, v))
}

// PackageContainsFold applies the ContainsFold predicate on the "package" field.
func PackageContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldPackage, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldTitle, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldKey, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotNull(FieldValue))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldValue, v))
}

// DefaultValueEQ applies the EQ predicate on the "default_value" field.
func DefaultValueEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldDefaultValue, v))
}

// DefaultValueNEQ applies the NEQ predicate on the "default_value" field.
func DefaultValueNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldDefaultValue, v))
}

// DefaultValueIn applies the In predicate on the "default_value" field.
func DefaultValueIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldDefaultValue, vs...))
}

// DefaultValueNotIn applies the NotIn predicate on the "default_value" field.
func DefaultValueNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldDefaultValue, vs...))
}

// DefaultValueGT applies the GT predicate on the "default_value" field.
func DefaultValueGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldDefaultValue, v))
}

// DefaultValueGTE applies the GTE predicate on the "default_value" field.
func DefaultValueGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldDefaultValue, v))
}

// DefaultValueLT applies the LT predicate on the "default_value" field.
func DefaultValueLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldDefaultValue, v))
}

// DefaultValueLTE applies the LTE predicate on the "default_value" field.
func DefaultValueLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldDefaultValue, v))
}

// DefaultValueContains applies the Contains predicate on the "default_value" field.
func DefaultValueContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldDefaultValue, v))
}

// DefaultValueHasPrefix applies the HasPrefix predicate on the "default_value" field.
func DefaultValueHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldDefaultValue, v))
}

// DefaultValueHasSuffix applies the HasSuffix predicate on the "default_value" field.
func DefaultValueHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldDefaultValue, v))
}

// DefaultValueEqualFold applies the EqualFold predicate on the "default_value" field.
func DefaultValueEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldDefaultValue, v))
}

// DefaultValueContainsFold applies the ContainsFold predicate on the "default_value" field.
func DefaultValueContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldDefaultValue, v))
}

// DbTypeEQ applies the EQ predicate on the "db_type" field.
func DbTypeEQ(v DbType) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldDbType, v))
}

// DbTypeNEQ applies the NEQ predicate on the "db_type" field.
func DbTypeNEQ(v DbType) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldDbType, v))
}

// DbTypeIn applies the In predicate on the "db_type" field.
func DbTypeIn(vs ...DbType) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldDbType, vs...))
}

// DbTypeNotIn applies the NotIn predicate on the "db_type" field.
func DbTypeNotIn(vs ...DbType) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldDbType, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldDescription, v))
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEQ(FieldOptions, v))
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNEQ(FieldOptions, v))
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIn(FieldOptions, vs...))
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotIn(FieldOptions, vs...))
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGT(FieldOptions, v))
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldGTE(FieldOptions, v))
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLT(FieldOptions, v))
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldLTE(FieldOptions, v))
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContains(FieldOptions, v))
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasPrefix(FieldOptions, v))
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldHasSuffix(FieldOptions, v))
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldIsNull(FieldOptions))
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldNotNull(FieldOptions))
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldEqualFold(FieldOptions, v))
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.FieldContainsFold(FieldOptions, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExtensionSetting) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExtensionSetting) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExtensionSetting) predicate.ExtensionSetting {
	return predicate.ExtensionSetting(sql.NotPredicates(p))
}
