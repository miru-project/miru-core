// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/miru-project/miru-core/ent/favorite"
)

// Favorite is the model entity for the Favorite schema.
type Favorite struct {
	config `json:"-"`
	// ID of the ent.
	// The ID of the favorite
	ID int `json:"id,omitempty"`
	// The package identifier
	Package string `json:"package,omitempty"`
	// The URL of the content
	URL string `json:"url,omitempty"`
	// Type of content
	Type string `json:"type,omitempty"`
	// Title of the content
	Title string `json:"title,omitempty"`
	// Cover image URL
	Cover *string `json:"cover,omitempty"`
	// Date when the favorite was created/updated
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavoriteQuery when eager-loading is set.
	Edges        FavoriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FavoriteEdges holds the relations/edges for other nodes in the graph.
type FavoriteEdges struct {
	// Group holds the value of the group edge.
	Group []*FavoriteGroup `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading.
func (e FavoriteEdges) GroupOrErr() ([]*FavoriteGroup, error) {
	if e.loadedTypes[0] {
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favorite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID:
			values[i] = new(sql.NullInt64)
		case favorite.FieldPackage, favorite.FieldURL, favorite.FieldType, favorite.FieldTitle, favorite.FieldCover:
			values[i] = new(sql.NullString)
		case favorite.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favorite fields.
func (_m *Favorite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case favorite.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				_m.Package = value.String
			}
		case favorite.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case favorite.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case favorite.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case favorite.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				_m.Cover = new(string)
				*_m.Cover = value.String
			}
		case favorite.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				_m.Date = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favorite.
// This includes values selected through modifiers, order, etc.
func (_m *Favorite) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the Favorite entity.
func (_m *Favorite) QueryGroup() *FavoriteGroupQuery {
	return NewFavoriteClient(_m.config).QueryGroup(_m)
}

// Update returns a builder for updating this Favorite.
// Note that you need to call Favorite.Unwrap() before calling this method if this Favorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Favorite) Update() *FavoriteUpdateOne {
	return NewFavoriteClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Favorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Favorite) Unwrap() *Favorite {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favorite is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Favorite) String() string {
	var builder strings.Builder
	builder.WriteString("Favorite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("package=")
	builder.WriteString(_m.Package)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	if v := _m.Cover; v != nil {
		builder.WriteString("cover=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(_m.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Favorites is a parsable slice of Favorite.
type Favorites []*Favorite
