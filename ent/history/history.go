// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the history type in the database.
	Label = "history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackage holds the string denoting the package field in the database.
	FieldPackage = "package"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldEpisodeGroupID holds the string denoting the episode_group_id field in the database.
	FieldEpisodeGroupID = "episode_group_id"
	// FieldEpisodeID holds the string denoting the episode_id field in the database.
	FieldEpisodeID = "episode_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldEpisodeTitle holds the string denoting the episode_title field in the database.
	FieldEpisodeTitle = "episode_title"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldTotalProgress holds the string denoting the total_progress field in the database.
	FieldTotalProgress = "total_progress"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// Table holds the table name of the history in the database.
	Table = "histories"
)

// Columns holds all SQL columns for history fields.
var Columns = []string{
	FieldID,
	FieldPackage,
	FieldURL,
	FieldCover,
	FieldType,
	FieldEpisodeGroupID,
	FieldEpisodeID,
	FieldTitle,
	FieldEpisodeTitle,
	FieldProgress,
	FieldTotalProgress,
	FieldDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PackageValidator is a validator for the "package" field. It is called by the builders before save.
	PackageValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// EpisodeTitleValidator is a validator for the "episode_title" field. It is called by the builders before save.
	EpisodeTitleValidator func(string) error
	// ProgressValidator is a validator for the "progress" field. It is called by the builders before save.
	ProgressValidator func(string) error
	// TotalProgressValidator is a validator for the "total_progress" field. It is called by the builders before save.
	TotalProgressValidator func(string) error
	// DefaultDate holds the default value on creation for the "date" field.
	DefaultDate func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the History queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackage orders the results by the package field.
func ByPackage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackage, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByCover orders the results by the cover field.
func ByCover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCover, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByEpisodeGroupID orders the results by the episode_group_id field.
func ByEpisodeGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeGroupID, opts...).ToFunc()
}

// ByEpisodeID orders the results by the episode_id field.
func ByEpisodeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByEpisodeTitle orders the results by the episode_title field.
func ByEpisodeTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeTitle, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByTotalProgress orders the results by the total_progress field.
func ByTotalProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalProgress, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}
