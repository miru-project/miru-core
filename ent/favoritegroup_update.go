// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/favorite"
	"github.com/miru-project/miru-core/ent/favoritegroup"
	"github.com/miru-project/miru-core/ent/predicate"
)

// FavoriteGroupUpdate is the builder for updating FavoriteGroup entities.
type FavoriteGroupUpdate struct {
	config
	hooks    []Hook
	mutation *FavoriteGroupMutation
}

// Where appends a list predicates to the FavoriteGroupUpdate builder.
func (fgu *FavoriteGroupUpdate) Where(ps ...predicate.FavoriteGroup) *FavoriteGroupUpdate {
	fgu.mutation.Where(ps...)
	return fgu
}

// SetName sets the "name" field.
func (fgu *FavoriteGroupUpdate) SetName(s string) *FavoriteGroupUpdate {
	fgu.mutation.SetName(s)
	return fgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fgu *FavoriteGroupUpdate) SetNillableName(s *string) *FavoriteGroupUpdate {
	if s != nil {
		fgu.SetName(*s)
	}
	return fgu
}

// SetDate sets the "date" field.
func (fgu *FavoriteGroupUpdate) SetDate(t time.Time) *FavoriteGroupUpdate {
	fgu.mutation.SetDate(t)
	return fgu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fgu *FavoriteGroupUpdate) SetNillableDate(t *time.Time) *FavoriteGroupUpdate {
	if t != nil {
		fgu.SetDate(*t)
	}
	return fgu
}

// AddFavoriteIDs adds the "favorites" edge to the Favorite entity by IDs.
func (fgu *FavoriteGroupUpdate) AddFavoriteIDs(ids ...int) *FavoriteGroupUpdate {
	fgu.mutation.AddFavoriteIDs(ids...)
	return fgu
}

// AddFavorites adds the "favorites" edges to the Favorite entity.
func (fgu *FavoriteGroupUpdate) AddFavorites(f ...*Favorite) *FavoriteGroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.AddFavoriteIDs(ids...)
}

// Mutation returns the FavoriteGroupMutation object of the builder.
func (fgu *FavoriteGroupUpdate) Mutation() *FavoriteGroupMutation {
	return fgu.mutation
}

// ClearFavorites clears all "favorites" edges to the Favorite entity.
func (fgu *FavoriteGroupUpdate) ClearFavorites() *FavoriteGroupUpdate {
	fgu.mutation.ClearFavorites()
	return fgu
}

// RemoveFavoriteIDs removes the "favorites" edge to Favorite entities by IDs.
func (fgu *FavoriteGroupUpdate) RemoveFavoriteIDs(ids ...int) *FavoriteGroupUpdate {
	fgu.mutation.RemoveFavoriteIDs(ids...)
	return fgu
}

// RemoveFavorites removes "favorites" edges to Favorite entities.
func (fgu *FavoriteGroupUpdate) RemoveFavorites(f ...*Favorite) *FavoriteGroupUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fgu.RemoveFavoriteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fgu *FavoriteGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fgu.sqlSave, fgu.mutation, fgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fgu *FavoriteGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := fgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fgu *FavoriteGroupUpdate) Exec(ctx context.Context) error {
	_, err := fgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fgu *FavoriteGroupUpdate) ExecX(ctx context.Context) {
	if err := fgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fgu *FavoriteGroupUpdate) check() error {
	if v, ok := fgu.mutation.Name(); ok {
		if err := favoritegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FavoriteGroup.name": %w`, err)}
		}
	}
	return nil
}

func (fgu *FavoriteGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(favoritegroup.Table, favoritegroup.Columns, sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt))
	if ps := fgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fgu.mutation.Name(); ok {
		_spec.SetField(favoritegroup.FieldName, field.TypeString, value)
	}
	if value, ok := fgu.mutation.Date(); ok {
		_spec.SetField(favoritegroup.FieldDate, field.TypeTime, value)
	}
	if fgu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !fgu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fgu.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoritegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fgu.mutation.done = true
	return n, nil
}

// FavoriteGroupUpdateOne is the builder for updating a single FavoriteGroup entity.
type FavoriteGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavoriteGroupMutation
}

// SetName sets the "name" field.
func (fguo *FavoriteGroupUpdateOne) SetName(s string) *FavoriteGroupUpdateOne {
	fguo.mutation.SetName(s)
	return fguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fguo *FavoriteGroupUpdateOne) SetNillableName(s *string) *FavoriteGroupUpdateOne {
	if s != nil {
		fguo.SetName(*s)
	}
	return fguo
}

// SetDate sets the "date" field.
func (fguo *FavoriteGroupUpdateOne) SetDate(t time.Time) *FavoriteGroupUpdateOne {
	fguo.mutation.SetDate(t)
	return fguo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fguo *FavoriteGroupUpdateOne) SetNillableDate(t *time.Time) *FavoriteGroupUpdateOne {
	if t != nil {
		fguo.SetDate(*t)
	}
	return fguo
}

// AddFavoriteIDs adds the "favorites" edge to the Favorite entity by IDs.
func (fguo *FavoriteGroupUpdateOne) AddFavoriteIDs(ids ...int) *FavoriteGroupUpdateOne {
	fguo.mutation.AddFavoriteIDs(ids...)
	return fguo
}

// AddFavorites adds the "favorites" edges to the Favorite entity.
func (fguo *FavoriteGroupUpdateOne) AddFavorites(f ...*Favorite) *FavoriteGroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.AddFavoriteIDs(ids...)
}

// Mutation returns the FavoriteGroupMutation object of the builder.
func (fguo *FavoriteGroupUpdateOne) Mutation() *FavoriteGroupMutation {
	return fguo.mutation
}

// ClearFavorites clears all "favorites" edges to the Favorite entity.
func (fguo *FavoriteGroupUpdateOne) ClearFavorites() *FavoriteGroupUpdateOne {
	fguo.mutation.ClearFavorites()
	return fguo
}

// RemoveFavoriteIDs removes the "favorites" edge to Favorite entities by IDs.
func (fguo *FavoriteGroupUpdateOne) RemoveFavoriteIDs(ids ...int) *FavoriteGroupUpdateOne {
	fguo.mutation.RemoveFavoriteIDs(ids...)
	return fguo
}

// RemoveFavorites removes "favorites" edges to Favorite entities.
func (fguo *FavoriteGroupUpdateOne) RemoveFavorites(f ...*Favorite) *FavoriteGroupUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fguo.RemoveFavoriteIDs(ids...)
}

// Where appends a list predicates to the FavoriteGroupUpdate builder.
func (fguo *FavoriteGroupUpdateOne) Where(ps ...predicate.FavoriteGroup) *FavoriteGroupUpdateOne {
	fguo.mutation.Where(ps...)
	return fguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fguo *FavoriteGroupUpdateOne) Select(field string, fields ...string) *FavoriteGroupUpdateOne {
	fguo.fields = append([]string{field}, fields...)
	return fguo
}

// Save executes the query and returns the updated FavoriteGroup entity.
func (fguo *FavoriteGroupUpdateOne) Save(ctx context.Context) (*FavoriteGroup, error) {
	return withHooks(ctx, fguo.sqlSave, fguo.mutation, fguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fguo *FavoriteGroupUpdateOne) SaveX(ctx context.Context) *FavoriteGroup {
	node, err := fguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fguo *FavoriteGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := fguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fguo *FavoriteGroupUpdateOne) ExecX(ctx context.Context) {
	if err := fguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fguo *FavoriteGroupUpdateOne) check() error {
	if v, ok := fguo.mutation.Name(); ok {
		if err := favoritegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FavoriteGroup.name": %w`, err)}
		}
	}
	return nil
}

func (fguo *FavoriteGroupUpdateOne) sqlSave(ctx context.Context) (_node *FavoriteGroup, err error) {
	if err := fguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(favoritegroup.Table, favoritegroup.Columns, sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt))
	id, ok := fguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FavoriteGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favoritegroup.FieldID)
		for _, f := range fields {
			if !favoritegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favoritegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fguo.mutation.Name(); ok {
		_spec.SetField(favoritegroup.FieldName, field.TypeString, value)
	}
	if value, ok := fguo.mutation.Date(); ok {
		_spec.SetField(favoritegroup.FieldDate, field.TypeTime, value)
	}
	if fguo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !fguo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fguo.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   favoritegroup.FavoritesTable,
			Columns: favoritegroup.FavoritesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FavoriteGroup{config: fguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoritegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fguo.mutation.done = true
	return _node, nil
}
