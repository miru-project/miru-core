// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/miru-project/miru-core/ent/favorite"
	"github.com/miru-project/miru-core/ent/favoritegroup"
)

// FavoriteCreate is the builder for creating a Favorite entity.
type FavoriteCreate struct {
	config
	mutation *FavoriteMutation
	hooks    []Hook
}

// SetPackage sets the "package" field.
func (fc *FavoriteCreate) SetPackage(s string) *FavoriteCreate {
	fc.mutation.SetPackage(s)
	return fc
}

// SetURL sets the "url" field.
func (fc *FavoriteCreate) SetURL(s string) *FavoriteCreate {
	fc.mutation.SetURL(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FavoriteCreate) SetType(s string) *FavoriteCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetTitle sets the "title" field.
func (fc *FavoriteCreate) SetTitle(s string) *FavoriteCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetCover sets the "cover" field.
func (fc *FavoriteCreate) SetCover(s string) *FavoriteCreate {
	fc.mutation.SetCover(s)
	return fc
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (fc *FavoriteCreate) SetNillableCover(s *string) *FavoriteCreate {
	if s != nil {
		fc.SetCover(*s)
	}
	return fc
}

// SetDate sets the "date" field.
func (fc *FavoriteCreate) SetDate(t time.Time) *FavoriteCreate {
	fc.mutation.SetDate(t)
	return fc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (fc *FavoriteCreate) SetNillableDate(t *time.Time) *FavoriteCreate {
	if t != nil {
		fc.SetDate(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FavoriteCreate) SetID(i int) *FavoriteCreate {
	fc.mutation.SetID(i)
	return fc
}

// AddGroupIDs adds the "group" edge to the FavoriteGroup entity by IDs.
func (fc *FavoriteCreate) AddGroupIDs(ids ...int) *FavoriteCreate {
	fc.mutation.AddGroupIDs(ids...)
	return fc
}

// AddGroup adds the "group" edges to the FavoriteGroup entity.
func (fc *FavoriteCreate) AddGroup(f ...*FavoriteGroup) *FavoriteCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddGroupIDs(ids...)
}

// Mutation returns the FavoriteMutation object of the builder.
func (fc *FavoriteCreate) Mutation() *FavoriteMutation {
	return fc.mutation
}

// Save creates the Favorite in the database.
func (fc *FavoriteCreate) Save(ctx context.Context) (*Favorite, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavoriteCreate) SaveX(ctx context.Context) *Favorite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavoriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavoriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FavoriteCreate) defaults() {
	if _, ok := fc.mutation.Date(); !ok {
		v := favorite.DefaultDate()
		fc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavoriteCreate) check() error {
	if _, ok := fc.mutation.Package(); !ok {
		return &ValidationError{Name: "package", err: errors.New(`ent: missing required field "Favorite.package"`)}
	}
	if v, ok := fc.mutation.Package(); ok {
		if err := favorite.PackageValidator(v); err != nil {
			return &ValidationError{Name: "package", err: fmt.Errorf(`ent: validator failed for field "Favorite.package": %w`, err)}
		}
	}
	if _, ok := fc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Favorite.url"`)}
	}
	if v, ok := fc.mutation.URL(); ok {
		if err := favorite.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Favorite.url": %w`, err)}
		}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Favorite.type"`)}
	}
	if v, ok := fc.mutation.GetType(); ok {
		if err := favorite.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Favorite.type": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Favorite.title"`)}
	}
	if v, ok := fc.mutation.Title(); ok {
		if err := favorite.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Favorite.title": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Favorite.date"`)}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := favorite.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Favorite.id": %w`, err)}
		}
	}
	return nil
}

func (fc *FavoriteCreate) sqlSave(ctx context.Context) (*Favorite, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FavoriteCreate) createSpec() (*Favorite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favorite{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(favorite.Table, sqlgraph.NewFieldSpec(favorite.FieldID, field.TypeInt))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Package(); ok {
		_spec.SetField(favorite.FieldPackage, field.TypeString, value)
		_node.Package = value
	}
	if value, ok := fc.mutation.URL(); ok {
		_spec.SetField(favorite.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(favorite.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(favorite.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Cover(); ok {
		_spec.SetField(favorite.FieldCover, field.TypeString, value)
		_node.Cover = &value
	}
	if value, ok := fc.mutation.Date(); ok {
		_spec.SetField(favorite.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := fc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favorite.GroupTable,
			Columns: favorite.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favoritegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FavoriteCreateBulk is the builder for creating many Favorite entities in bulk.
type FavoriteCreateBulk struct {
	config
	err      error
	builders []*FavoriteCreate
}

// Save creates the Favorite entities in the database.
func (fcb *FavoriteCreateBulk) Save(ctx context.Context) ([]*Favorite, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favorite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) SaveX(ctx context.Context) []*Favorite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavoriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
